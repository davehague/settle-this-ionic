-- Custom types
CREATE TYPE settlethis.argument_type AS ENUM ('twoParty', 'singleProposal');
CREATE TYPE settlethis.argument_status AS ENUM ('draft', 'awaitingSecondParty', 'published', 'closed');

-- Users table (for Google OAuth)
CREATE TABLE settlethis.users (
    id UUID PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    name TEXT,
    picture_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL
);

-- Arguments table (base table with common fields)
CREATE TABLE settlethis.arguments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    topic TEXT NOT NULL,
    type settlethis.argument_type NOT NULL,
    status settlethis.argument_status NOT NULL DEFAULT 'draft',
    category TEXT NOT NULL,
    created_by_id UUID NOT NULL REFERENCES settlethis.users(id),
    share_token UUID DEFAULT gen_random_uuid() UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL
);

-- Two Party Arguments
CREATE TABLE settlethis.two_party_arguments (
    argument_id BIGINT PRIMARY KEY REFERENCES settlethis.arguments(id) ON DELETE CASCADE,
    first_party_position TEXT NOT NULL,
    second_party_position TEXT,
    second_party_id UUID REFERENCES settlethis.users(id),
    party1_votes INTEGER DEFAULT 0 NOT NULL,
    party2_votes INTEGER DEFAULT 0 NOT NULL,
    CHECK (party1_votes >= 0),
    CHECK (party2_votes >= 0)
);

-- Single Proposal Arguments
CREATE TABLE settlethis.single_proposal_arguments (
    argument_id BIGINT PRIMARY KEY REFERENCES settlethis.arguments(id) ON DELETE CASCADE,
    proposal TEXT NOT NULL,
    votes_for INTEGER DEFAULT 0 NOT NULL,
    votes_against INTEGER DEFAULT 0 NOT NULL,
    CHECK (votes_for >= 0),
    CHECK (votes_against >= 0)
);

-- Votes table
CREATE TABLE settlethis.votes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    argument_id BIGINT NOT NULL REFERENCES settlethis.arguments(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES settlethis.users(id),
    voted_for_party1 BOOLEAN, -- for two_party_arguments
    voted_for BOOLEAN,        -- for single_proposal_arguments
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL,
    -- Ensure user can only vote once per argument
    UNIQUE(argument_id, user_id),
    -- Ensure vote type matches argument type
    CHECK (
        (voted_for_party1 IS NOT NULL AND voted_for IS NULL) OR
        (voted_for IS NOT NULL AND voted_for_party1 IS NULL)
    )
);

-- Indexes for performance
CREATE INDEX idx_arguments_created_by_id ON settlethis.arguments(created_by_id);
CREATE INDEX idx_arguments_status ON settlethis.arguments(status);
CREATE INDEX idx_votes_user_id ON settlethis.votes(user_id);
CREATE INDEX idx_votes_argument_id ON settlethis.votes(argument_id);
CREATE INDEX idx_two_party_second_party_id ON settlethis.two_party_arguments(second_party_id);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION settlethis.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc', NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers to automatically update updated_at
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON settlethis.users
    FOR EACH ROW
    EXECUTE FUNCTION settlethis.update_updated_at_column();

CREATE TRIGGER update_arguments_updated_at
    BEFORE UPDATE ON settlethis.arguments
    FOR EACH ROW
    EXECUTE FUNCTION settlethis.update_updated_at_column();
